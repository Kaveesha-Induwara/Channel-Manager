import time
import logging
from Config import Config
from pyrogram import Client, filters
from sql_helpers import forceSubscribe_sql as sql
from pyrogram.types import ChatPermissions, InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.errors.exceptions.bad_request_400 import UserNotParticipant, UsernameNotOccupied, ChatAdminRequired, PeerIdInvalid

logging.basicConfig(level=logging.INFO)

static_data_filter = filters.create(lambda _, __, query: query.data == "onUnMuteRequest")
@Client.on_callback_query(static_data_filter)
def _onUnMuteRequest(client, cb):
  user_id = cb.from_user.id
  chat_id = cb.message.chat.id
  chat_db = sql.fs_settings(chat_id)
  if chat_db:
    channel = chat_db.channel
    chat_member = client.get_chat_member(chat_id, user_id)
    if chat_member.restricted_by:
      if chat_member.restricted_by.id == (client.get_me()).id:
          try:
            client.get_chat_member(channel, user_id)
            client.unban_chat_member(chat_id, user_id)
            if cb.message.reply_to_message.from_user.id == user_id:
              cb.message.delete()
          except UserNotParticipant:
            client.answer_callback_query(cb.id, text="‚ùó ‡∂Ö‡∂¥‡∑ö 'channel' ‡∂ë‡∂ö‡∂ß join ‡∑Ä‡∑ô‡∂Ω‡∑è Unmute me Button ‡∂ë‡∂ö ‡∂Ü‡∂¥‡∑Ñ‡∑î ‡∂î‡∂∂‡∂±‡∑ä‡∂±", show_alert=True)
      else:
        client.answer_callback_query(cb.id, text="‚ùó You are muted by admins for other reasons.", show_alert=True)
    else:
      if not client.get_chat_member(chat_id, (client.get_me()).id).status == 'administrator':
        client.send_message(chat_id, f"‚ùó **{cb.from_user.mention} ‡∂ë‡∂∫‡∑è‡∑Ä Unmute ‡∂ö‡∂ª‡∂ú‡∂±‡∑ä‡∂± ‡∑Ñ‡∂Ø‡∂±‡∑Ä‡∑è... ‡∂±‡∂∏‡∑î‡∂≠‡∑ä ‡∂∏‡∂ß ‡∂î‡∑Ñ‡∑î‡∑Ä unmute ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∂∂‡∑ê‡∑Ñ‡∑ê! ‡∂∏‡∑ú‡∂ö‡∂Ø ‡∂∏‡∂∏ ‡∂∏‡∑ö ‡∂ú‡∑≤‡∂¥‡∑ä ‡∂ë‡∂ö ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä ‡∂±‡∑ô‡∑Ä‡∑ô‡∂∫‡∑íüòï ‡∂∏‡∑è‡∑Ä ‡∂Ü‡∂¥‡∑Ñ‡∑î ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä ‡∂Ø‡∑è‡∂±‡∑ä‡∂±.**\n__#Leaving this chat...__")
        client.leave_chat(chat_id)i am
      else:
        client.answer_callback_query(cb.id, text="‚ÄºÔ∏è‡∂Ö‡∑Ä‡∑Ä‡∑è‡∂Ø‡∂∫‡∂∫‡∑í : ‡∂î‡∂∫‡∑è‡∂ß ‡∂±‡∑í‡∂Ø‡∑Ñ‡∑É‡∑ö ‡∂ö‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∂¥‡∑î‡∑Ö‡∑î‡∑Ä‡∂±‡∑ä‡∂ö‡∂∏ ‡∂≠‡∑í‡∂∫‡∑ô‡∂Ø‡∑ä‡∂Ø‡∑í ‡∂∂‡∂ß‡∂±‡∑ä ‡∂ë‡∂ö ‡∂ö‡∑ä‡∂Ω‡∑í‡∂ö‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∂ë‡∂¥‡∑èüö´.", show_alert=True)



@Client.on_message(filters.text & ~filters.private & ~filters.edited, group=1)
def _check_member(client, message):
  chat_id = message.chat.id
  chat_db = sql.fs_settings(chat_id)
  if chat_db:
    user_id = message.from_user.id
    if not client.get_chat_member(chat_id, user_id).status in ("administrator", "creator") and not user_id in Config.SUDO_USERS:
      channel = chat_db.channel
      try:
        client.get_chat_member(channel, user_id)
      except UserNotParticipant:
        try:
          sent_message = message.reply_text(
              "‡∂Ü‡∂∫‡∑î‡∂∂‡∑ù‡∑Ä‡∂±‡∑ä {}, ‡∂î‡∂∫‡∑è ‡∂Ö‡∂¥‡∑ö [channel](https://t.me/{}) ‡∂ë‡∂ö ‡∂≠‡∑è‡∂∏ Subscribe ‡∂ö‡∂ª‡∂Ω ‡∂±‡∑ë.üò≠  ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª‡∂Ω ‡∂í‡∂ö‡∂ß [join](https://t.me/{}) ‡∑Ä‡∑ô‡∂Ω‡∑è ‡∂¥‡∑Ñ‡∂Ω ‡∂≠‡∑í‡∂∫‡∂± UNMUTE ME Button ‡∂ë‡∂ö touch ‡∂ö‡∂ª‡∂±‡∑ä‡∂±..".format(message.from_user.mention, channel, channel),
              disable_web_page_preview=True,
              reply_markup=InlineKeyboardMarkup(
                  [[InlineKeyboardButton("UnMute Me", callback_data="onUnMuteRequest")]]
              )
          )
          client.restrict_chat_member(chat_id, user_id, ChatPermissions(can_send_messages=False))
        except ChatAdminRequired:
          sent_message.edit("‚ùó **‡∂∏‡∂∏ ‡∂∏‡∑ö ‡∂ú‡∑≤‡∂¥‡∑ä ‡∂ë‡∂ö ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä ‡∂±‡∑ô‡∑Ä‡∑ô‡∂∫‡∑í.**\n__‡∂∏‡∑è‡∑Ä Ban user permission ‡∂ë‡∂ö‡∑ä‡∂ö ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä ‡∂ö‡∑ô‡∂±‡∑ô‡∂ö‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.\n#Leaving this chat...__")
          client.leave_chat(chat_id)
      except ChatAdminRequired:
        client.send_message(chat_id, text=f"‚ùó **‡∂∏‡∂∏ @{channel}**\n__‡∂ë‡∂ö‡∑ö ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä ‡∂±‡∑ô‡∑Ä‡∑ô‡∂∫‡∑íüòï ‡∂∏‡∑è‡∑Ä Channel ‡∂ë‡∂ö‡∑ö Admin ‡∂ö‡∂ª‡∂Ω‡∑è ‡∂Ü‡∂¥‡∑Ñ‡∑î ‡∂∏‡∑è‡∑Ä add ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.\n#Leaving this chat...__")
        client.leave_chat(chat_id)


@Client.on_message(filters.command(["forcesubscribe", "fsub"]) & ~filters.private)
def config(client, message):
  user = client.get_chat_member(message.chat.id, message.from_user.id)
  if user.status is "creator" or user.user.id in Config.SUDO_USERS:
    chat_id = message.chat.id
    if len(message.command) > 1:
      input_str = message.command[1]
      input_str = input_str.replace("@", "")
      if input_str.lower() in ("off", "no", "disable"):
        sql.disapprove(chat_id)
        message.reply_text("‚ùå **Channel Manager is Disabled Successfully.**")
      elif input_str.lower() in ('clear'):
        sent_message = message.reply_text('**Unmuting all members who are muted by me...**')
        try:
          for chat_member in client.get_chat_members(message.chat.id, filter="restricted"):
            if chat_member.restricted_by.id == (client.get_me()).id:
                client.unban_chat_member(chat_id, chat_member.user.id)
                time.sleep(1)
          sent_message.edit('‚úÖ **UnMuted all members who are muted by me.**')
        except ChatAdminRequired:
          sent_message.edit('‚ùó **‡∂∏‡∂∏ ‡∂∏‡∑ö ‡∂ú‡∑≤‡∂¥‡∑ä ‡∂ë‡∂ö ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä ‡∂±‡∑ô‡∑Ä‡∑ô‡∂∫‡∑í.**\n__‡∂∏‡∂ß Members ‡∂Ω‡∑Ä unmute ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∂∂‡∑ê‡∑Ñ‡∑ê ... ‡∂∏‡∑è‡∑Ä Ban user permission ‡∂ë‡∂ö‡∑ä‡∂ö ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä ‡∂ö‡∑ô‡∂±‡∑ô‡∂ö‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.__')
      else:
        try:
          client.get_chat_member(input_str, "me")
          sql.add_channel(chat_id, input_str)
          message.reply_text(f"‚úÖ **Channel Manager is Enabled**\n__Channel Manager is enabled, ‡∂∏‡∑ö ‡∂ú‡∑≤‡∂¥‡∑ä ‡∂ë‡∂ö‡∑ö ‡∂∏‡∑ê‡∑É‡∑ö‡∂¢‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∑É‡∑í‡∂∫‡∂Ω‡∑î ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∑í‡∂±‡∑ä ‡∂∏‡∑ö [channel](https://t.me/{input_str}) ‡∂ë‡∂ö Subscribe ‡∂ö‡∑Ö ‡∂∫‡∑î‡∂≠‡∑î‡∂∫‡∑í.__", disable_web_page_preview=True)
        except UserNotParticipant:
          message.reply_text(f"‚ùó **Not an Admin in the Channel**\n__‡∂∏‡∂∏ [channel](https://t.me/{input_str}). ‡∂ë‡∂ö‡∑ö ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä ‡∂±‡∑ô‡∑Ä‡∑ô‡∂∫‡∑íüòï ‡∂∏‡∑ö ‡∂ú‡∑ò‡∂¥‡∑ä ‡∂ë‡∂ö‡∑ö ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂∏‡∑è‡∑Ä ‡∂†‡∑ê‡∂±‡∂Ω‡∑ä ‡∂ë‡∂ö‡∑ö admin ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∂Ö‡∂±‡∑í‡∑Ä‡∑è‡∂ª‡∑ä‡∂∫‡∂∫.__", disable_web_page_preview=True)
        except (UsernameNotOccupied, PeerIdInvalid):
          message.reply_text(f"‚ùó **Invalid Channel Username.**")
        except Exception as err:
          message.reply_text(f"‚ùó **ERROR:** ```{err}```")
    else:
      if sql.fs_settings(chat_id):
        message.reply_text(f"‚úÖ **Chanel Manager is enabled in this chat.**\n__For this [Channel](https://t.me/{sql.fs_settings(chat_id).channel})__", disable_web_page_preview=True)
      else:
        message.reply_text("‚ùå **Channel Manager is disabled in this chat.**")
  else:
      message.reply_text("‚ùó **Group Creator Required**\n__‡∂∏‡∑ö ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂î‡∂∂ ‡∂ú‡∑≤‡∂¥‡∑ä ‡∂ë‡∂ö‡∑ö ‡∂Ö‡∂∫‡∑í‡∂≠‡∑í‡∂ö‡∑è‡∂ª‡∂∫‡∑è ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫‡∑í.__")